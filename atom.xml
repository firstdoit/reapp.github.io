<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Reapp]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://reapp.io/"/>
  <updated>2015-03-31T18:19:37.000Z</updated>
  <id>http://reapp.io/</id>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Announcing reapp-kit: Lowering the barrier to being productive in React]]></title>
    <link href="http://reapp.io/2015/03/31/Announcing-reapp-kit-The-easiest-way-to-get-started-with-React/"/>
    <id>http://reapp.io/2015/03/31/Announcing-reapp-kit-The-easiest-way-to-get-started-with-React/</id>
    <published>2015-03-31T19:05:28.000Z</published>
    <updated>2015-03-31T18:19:37.000Z</updated>
    <content type="html"><![CDATA[<p>Reapp launched just over a month ago and we've been overwhelmed by the response.
We've gotten <a href="https://github.com/reapp/reapp" target="_blank" rel="external">thousands of stars on Github</a>, pushed <a href="">hundreds
of updates</a> across all our modules. We published <a href="https://scotch.io/tutorials/make-a-mobile-app-with-reactjs-in-30-minutes" target="_blank" rel="external">a getting started tutorial on Scotch.io</a>.
We added new components, a more accurate <a href="http://reapp.io/" target="_blank" rel="external">iOS theme</a>, support for React 0.13
(and <a href="http://reapp.io/docs-themes.html" target="_blank" rel="external">context-based themes</a>), a <a href="https://itunes.apple.com/us/app/hacker-news-by-reapp/id972297110?mt=8" target="_blank" rel="external">Hacker News app</a>,
and most improtantly, a whole bunch of <a href="http://reapp.io/ui.html" target="_blank" rel="external">documentation</a>.</p>
<p>All this to say, we're moving fast. Reapp is still a work in progress, but
we want to keep things moving fast. So today, we're releasing reapp-kit in beta.</p>
<h3>What is reapp-kit?</h3>
<p>Reapp-kit unifies all the reapp components to make building apps way, way simpler.
It brings chooses a few things for you, but mostly it brings together the reapp packages.</p>
<p>Included in reapp-kit:</p>
<ul>
<li>All of reapp-ui</li>
<li>Routes via react-router</li>
<li>fetch() polyfill</li>
<li>Immutable data for your components</li>
<li>Fynx for a simple store and actions</li>
<li>Patched React.Component with Immutable optimizations and Reapp Animation support</li>
<li>Cordova helpers</li>
</ul>
<p>Note: For now, these are all bundled as one. In the future we plan to add
support for customizing which of these pieces you'd like, while still getting all the
other reapp-kit optimizations.</p>
<h3>Why</h3>
<p>When building reapp, one of the biggest goals was to keep things cleanly separated.
React is still young, and no &quot;best&quot; practices have won out yet. In 2015, people
want to move fast, but they all have different requirements.</p>
<p>Originally, we solved this by gluing our <a href="http://github.com/reapp" target="_blank" rel="external">8 different user-facing packages</a>
with our CLI scaffolding. It greatly simplified startup, but building the app still
took too much work to put it all together.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Reapp launched just over a month ago and we've been overwhelmed by the response.
We've gotten <a href="https://github.com/reapp/reapp" ta]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Simplify Flux with Immutable.js and Fynx]]></title>
    <link href="http://reapp.io/2015/03/11/Simplify-Flux-with-Immutable-js-and-Fynx/"/>
    <id>http://reapp.io/2015/03/11/Simplify-Flux-with-Immutable-js-and-Fynx/</id>
    <published>2015-03-11T19:05:28.000Z</published>
    <updated>2015-03-23T17:03:27.000Z</updated>
    <content type="html"><![CDATA[<p>It's not exactly easy getting into Flux. There's a lot of terminology, and a lot of syntax.
Not to mention all the different libraries. While it's undoubtedly very useful,
for someone new to React it's a lot to take in.</p>
<p>Which is fine. Flux is really meant to solve problems for &quot;big&quot; apps.
When your UI is handling multiple events and transforming chunks of data.</p>
<p>In this article we'll explain how we got to using Fynx, and then show some example
code similar to how we used in in our <a href="https://github.com/reapp/hacker-news-app" target="_blank" rel="external">Hacker News app</a>.</p>
<h3>Prelude</h3>
<p>Nowadays, beyond rolling your own, there's a ton of libraries for Flux. From
<a href="http://fluxxor.com" target="_blank" rel="external">Fluxxor</a> to <a href="https://github.com/spoike/refluxjs" target="_blank" rel="external">Reflux</a> to
<a href="https://github.com/acdlite/flummox" target="_blank" rel="external">Flummox</a>, each brings something unique.</p>
<p>At the time we were building our app Fluxxor seemed the best documented and supported.
But, it was still verbose. After a week, out of a desperate want to reduce all the boilerplate
we were writing, we extracted <a href="https://github.com/natew/Brawndo" target="_blank" rel="external">a library on top of it</a>.
It was flexible, and it simplified things. But, now we were stuck with another dependency.</p>
<p>Then, came <a href="https://github.com/foss-haas/fynx" target="_blank" rel="external">Fynx</a>.</p>
<p>See, around the same time as Flux was announced, we'd been reading into <a href="https://github.com/omcljs/om" target="_blank" rel="external">Om</a>, <a href="https://github.com/omniscientjs/omniscient" target="_blank" rel="external">Omniscient</a>
and the recently released <a href="https://github.com/facebook/immutable-js" target="_blank" rel="external">Immutable.js</a>.
Immutable structures are awesome, and cursors seemed awesomely simple.
But, you still want to coordinate your actions somehow.</p>
<p>With Fynx, we got just that, and nothing more.
Despite it's awkward ASCII diagram, it actually reduced Flux conceptually to a single thing: actions.
How? Lets take a look.</p>
<h3>Stores</h3>
<p>Well, really just a store. Here's your entire store.js file, with Fynx:</p>
<pre><code>import { createCursorStore } from 'fynx';
import { fromJS } from 'immutable';

module.exports = createCursorStore(fromJS({
  dogIds: [],
  dogs: {}
});
</code></pre>
<p>That's all. Use it's keys as you would normal Flux stores. There's no store methods, no waitFor, just a single cursor.</p>
<h3>Actions</h3>
<p>The power of Fynx is in its actions. Our actions.js:</p>
<pre><code>import { createAsyncActions } from 'fynx';

var Actions = createAsyncActions([
  'loadDogs'
]);
</code></pre>
<p><em>Note: the async actions in Fynx just means it will chain with promises. It's nice in some cases, but not a requirement.</em></p>
<p>And then, we can make our dogActions.js:</p>
<pre><code>import Actions from './actions';
import store from './store';

// we fetch the ordered array of dogs
// then grab their individual data
Actions.loadDogs.listen(opts =&gt;
  getDogsListFromAPI(opts).then(res =&gt; {
    store().set('dogIds', res);
    getDogsData(res);
  })
)

function getDogsData(res) {
  res.map(id =&gt; {
    getDogAPI(id).then(dog =&gt; {
      store().setIn(['dogs', dog.id], dog)
    })
  })
}

function getDogsListFromAPI() {
  return Promise.resolve([1, 2, 3]);
}

function getDogAPI(id) {
  var data = {
    1: { id: 1, breed: 'Jack Russell' },
    2: { id: 2, breed: 'Shih Tzu' },
    3: { id: 3, breed: 'Pitbull' },
  }
  return Promise.resolve(data[id]);
}
</code></pre>
<p>Some nice things about this:</p>
<ul>
<li>All our dog actions are in one place</li>
<li>I can chain my actions together as much as needed</li>
<li>Simple functions everywhere</li>
</ul>
<h3>Linking it to React</h3>
<p>In our top level Dogs class, lets grab our store and pass it down. We can also grab the store at any level of our app just by importing it.</p>
<pre><code>import store from './store';
import Dog from './Dog';

module.exports = React.createClass({
  render() {
    var dogIds = store().get('dogIds');

    return dogIds.map(id =&gt;
      var dog = store().getIn(['dogs', id]);

      return &lt;Dog data={dog} /&gt;;
    });
  });
});
</code></pre>
<p>And lets say in our Dog component, we can either respond to data simply:</p>
<pre><code>this.props.data.set('name', 'Scruffy');
</code></pre>
<p>And our store will update, along with our UI. But, this isn't Flux. Lets say we add an action in our dogActions file that reverses our dog list. After we've added the action name in our actions.js we can do this:</p>
<pre><code>Action.reverseDogs.listen(() =&gt;
  store().update('dogIds', dogs =&gt; dogs.reverse())
);
</code></pre>
<p>And anywhere in our React tree we could then call:</p>
<pre><code>import Actions from './actions';
Actions.reverseDogs();
</code></pre>
<h3>shouldComponentUpdate</h3>
<p>The final step is to optimize our components shouldComponentUpdate now that we have immutable data throughout our app. Omniscient gives us a really nice one that works out of the box with Immutable.js.</p>
<pre><code>import shouldComponentUpdate from 'omniscient/shouldupdate';

React.createClass({
  shouldComponentUpdate,
  render() {
    //...
  }
})
</code></pre>
<p>In <a href="https://reapp.io" target="_blank" rel="external">Reapp</a>, I use <a href="https://github.com/reapp/reapp-component" target="_blank" rel="external">a decorator</a> so I don't have to manually mix it in on every class.</p>
<h3>In action</h3>
<p><strong>Update:</strong> Thanks to <a href="https://github.com/snickell" target="_blank" rel="external">snickell</a>, we have a
<a href="https://github.com/reapp/reapp-dog-example" target="_blank" rel="external">working demo with this code here</a>.
Check it out to see a simple example of this in action!</p>
<p>Want to see an app using this Flux technique in production? Download it in the
<a href="https://itunes.apple.com/us/app/hacker-news-by-reapp/id972297110?mt=8" target="_blank" rel="external">iOS app store</a>
and check out <a href="https://github.com/reapp/hacker-news-app" target="_blank" rel="external">the code on GitHub</a>.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>It's not exactly easy getting into Flux. There's a lot of terminology, and a lot of syntax.
Not to mention all the different libraries. W]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Welcome to Reapp]]></title>
    <link href="http://reapp.io/2015/03/08/Welcome-to-Reapp/"/>
    <id>http://reapp.io/2015/03/08/Welcome-to-Reapp/</id>
    <published>2015-03-09T04:05:28.000Z</published>
    <updated>2015-03-11T07:57:07.000Z</updated>
    <content type="html"><![CDATA[<p>Welcome to the Reapp blog.</p>
<p>We've spend a lot of time getting the documentation and presentation of the
website here just right, but it's due time to improve the community. Along
with our own <a href="https://gitter.im/reapp/reapp" target="_blank" rel="external">Gitter channel for chatting</a>
and <a href="https://twitter.com/reapp" target="_blank" rel="external">Twitter account for news</a>,
we're starting this blog.</p>
<p>Reapp is moving at breakneck speed. We have huge ambitions and exciting things
in the pipeline. A Material UI theme is coming. As are new components.</p>
<p>But first, we want to start by
creating the best documentation of any app platform.</p>
<p>Starting this week we'll be publishing a series of articles on using Reapp.
These will be guides on building real-world apps as well as walkthrough on
how to use the more impressive technical features of Reapp.</p>
<p>We already have an exciting full-length walthrough coming out on <a href="http://scotch.io" target="_blank" rel="external">Scotch.io</a>
shortly. We have some great <a href="https://github.com/reapp/hacker-news-app" target="_blank" rel="external">example</a> <a href="https://github.com/reapp/kitchen-sink" target="_blank" rel="external">apps</a>
you can look at for inspiration in structuring your apps.</p>
<p>Finally, we have some big news on companies using Reapp coming soon.</p>
<p>Subscribe to our feed to keep posted, exciting times are ahead.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Welcome to the Reapp blog.</p>
<p>We've spend a lot of time getting the documentation and presentation of the
website here just right, bu]]>
    </summary>
    
  </entry>
  
</feed>